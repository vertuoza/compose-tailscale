services:
  tailscale:
    image: tailscale/tailscale:latest
    container_name: pr-env-api-ts
    hostname: pr-env-api-local
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTH_KEY}
      - TS_EXTRA_ARGS=--advertise-tags=tag:container
      - TS_SERVE_CONFIG=/config/pr-env-api.json
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - ${PWD}/config:/config
      - ${PWD}/state:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    # restart: unless-stopped
    networks:
      - pr-env-network

  mysql:
    image: mysql:8.0
    container_name: pr-env-api-mysql
    # restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-rootpassword}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-pr_environments}
      - MYSQL_USER=${MYSQL_USER:-prenvuser}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-prenvpassword}
    volumes:
      - pr-env-mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - pr-env-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "--password=${MYSQL_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pr-env-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pr-env-api
    # restart: unless-stopped
    volumes:
      - ./:/app
      - /app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
      - ../vertuoza-compose:/vertuoza-compose
    environment:
      - PORT=3000
      - NODE_ENV=development
      - TAILSCALE_DOMAIN=${TAILSCALE_DOMAIN:-tailf31c84.ts.net}
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${MYSQL_DATABASE:-pr_environments}
      - MYSQL_USER=${MYSQL_USER:-prenvuser}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-prenvpassword}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - VERTUOZA_COMPOSE_DIR=/vertuoza-compose
      # Google Cloud Authentication
      - GOOGLE_CLOUD_KEYFILE=${GOOGLE_CLOUD_KEYFILE}
      # GitHub Authentication
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    networks:
      - pr-env-network
    depends_on:
      tailscale:
        condition: service_started
      mysql:
        condition: service_healthy

networks:
  pr-env-network:
    name: "pr-env-network"
    attachable: true

volumes:
  pr-env-api-ts-state:
    driver: local
  pr-env-mysql-data:
    driver: local
