name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          golangci-lint --version

      - name: Run golangci-lint
        run: golangci-lint run ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build
        run: go build -v ./...

      - name: Build Docker image
        run: docker build -t pr-env-api:${{ github.sha }} .

      - name: Save Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p /tmp/docker-images
          docker save pr-env-api:${{ github.sha }} > /tmp/docker-images/pr-env-api.tar

      - name: Upload Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/docker-images/pr-env-api.tar
          retention-days: 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: /tmp/docker-images

      - name: Load Docker image
        run: |
          docker load < /tmp/docker-images/pr-env-api.tar

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          TAILSCALE_DOMAIN: ${{ secrets.TAILSCALE_DOMAIN }}
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          # Save the docker-compose.yml file
          scp docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/

          # Save the .env file
          echo "PORT=3000" > .env
          echo "NODE_ENV=production" >> .env
          echo "TAILSCALE_DOMAIN=$TAILSCALE_DOMAIN" >> .env
          echo "TAILSCALE_AUTH_KEY=$TAILSCALE_AUTH_KEY" >> .env
          echo "DB_PATH=/app/data/pr-environments.db" >> .env
          echo "LOG_LEVEL=info" >> .env
          echo "DATA_DIR=/app/data" >> .env
          scp .env $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/

          # Tag and push the image to the server
          docker save pr-env-api:${{ github.sha }} | ssh $DEPLOY_USER@$DEPLOY_HOST "docker load"
          ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker tag pr-env-api:${{ github.sha }} pr-env-api:latest"

          # Restart the service
          ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose down && docker-compose up -d"
